openapi: 3.0.3
info:
  title: QRAPI Documentation
  description: |
    API para gestión de WhatsApp con arquitectura multi-tenant.
    
    ## Dominios
    - **Reseller/Admin**: `{{dominio}}` - Gestión de tenants, planes y configuración general
    - **Tenant**: `{{subdominio}}` - Operaciones específicas de cada cliente (dispositivos, mensajes, campañas)
    
    ## Autenticación
    La API utiliza Bearer Token (JWT) para autenticación. Obtén el token mediante el endpoint de login correspondiente.
  version: 1.0.0
  contact:
    name: QRAPI Support
    
servers:
  - url: https://{dominio}
    description: Servidor Reseller/Admin
    variables:
      dominio:
        default: qr.buho.la
        description: Dominio principal del sistema
  - url: https://{subdominio}
    description: Servidor Tenant
    variables:
      subdominio:
        default: demo.qr.buho.la
        description: Subdominio del tenant

tags:
  - name: Auth - Reseller
    description: Autenticación para administradores y resellers
    x-displayName: 🔐 Auth Reseller
  - name: Auth - Tenant
    description: Autenticación para usuarios tenant
    x-displayName: 🔐 Auth Tenant
  - name: Plans
    description: Gestión de planes de servicio
    x-displayName: 📋 Planes
  - name: Tenants
    description: Gestión de clientes/tenants
    x-displayName: 🏢 Tenants
  - name: Devices
    description: Gestión de dispositivos WhatsApp
    x-displayName: 📱 Dispositivos
  - name: Messages
    description: Envío de mensajes
    x-displayName: 💬 Mensajes
  - name: Campaigns
    description: Gestión de campañas masivas
    x-displayName: 📢 Campañas

x-tagGroups:
  - name: Administración
    tags:
      - Auth - Reseller
      - Plans
      - Tenants
  - name: Operaciones Tenant
    tags:
      - Auth - Tenant
      - Devices
      - Messages
      - Campaigns

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT obtenido del endpoint de login
    apiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: API Key para acceso directo

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: admin@qr.buho.la
        password:
          type: string
          format: password
          example: bh0yJj2C

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        api_token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
        user:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            email:
              type: string

    Plan:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Plan Premium
        is_free:
          type: boolean
          example: false
        price:
          type: number
          format: float
          example: 49.99
        description:
          type: string
          example: Plan con todas las funcionalidades
        limit_devices:
          type: integer
          example: 10
        limit_messages:
          type: integer
          example: 5000
        limit_contacts:
          type: integer
          example: 1000

    CreatePlanRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          example: Plan Premium
        is_free:
          type: boolean
          example: false
        price:
          type: number
          format: float
          example: 49.99
        description:
          type: string
          example: Plan con todas las funcionalidades
        limit_devices:
          type: integer
          example: 10
        limit_messages:
          type: integer
          example: 5000
        limit_contacts:
          type: integer
          example: 1000

    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 31845898-ba4b-4b59-b932-a6d34730cc55
        name:
          type: string
          example: EmpresaDemo
        domain:
          type: string
          example: demo.qr.buho.la
        active:
          type: boolean
          example: true
        plan:
          $ref: '#/components/schemas/Plan'

    CreateTenantRequest:
      type: object
      required:
        - name
        - domain
        - email
        - password
        - plan_id
      properties:
        name:
          type: string
          example: EmpresaDemo
        domain:
          type: string
          example: demo
          description: Subdominio (se agregará automáticamente .qr.buho.la)
        email:
          type: string
          format: email
          example: admin@empresa.com
        password:
          type: string
          format: password
          example: "123456"
        plan_id:
          type: integer
          example: 1

    Device:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Mi Dispositivo
        phone:
          type: string
          example: "51987654321"
        status:
          type: string
          enum: [connected, disconnected, pending]
          example: connected

    CreateDeviceRequest:
      type: object
      required:
        - name
        - phone
      properties:
        name:
          type: string
          example: Mi Dispositivo
        phone:
          type: string
          example: "51987654321"

    SendTextRequest:
      type: object
      required:
        - number
        - text
      properties:
        number:
          type: string
          example: "51929088138"
        text:
          type: string
          example: Hola desde la API

    SendMessageDirectRequest:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum: [sendText]
          example: sendText
        payload:
          type: object
          properties:
            number:
              type: string
              example: "51929088138"
            text:
              type: string
              example: Hola desde el gateway 👋

    Campaign:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        total_messages:
          type: integer
        sent_messages:
          type: integer
        failed_messages:
          type: integer

    CreateManualCampaignRequest:
      type: object
      required:
        - title
        - groups
        - message
      properties:
        title:
          type: string
          example: Campaña de prueba
        groups:
          type: array
          items:
            type: integer
          example: [1, 2]
        message:
          type: string
          example: Hola, este es un mensaje de prueba.
        schedule_at:
          type: string
          format: date-time
          example: "2025-10-01 10:00:00"
        attach_pdf:
          type: string
          nullable: true

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error description
        errors:
          type: object
          additionalProperties: true

paths:
  # ==========================================
  # AUTH - RESELLER
  # ==========================================
  /auth/login:
    post:
      tags:
        - Auth - Reseller
      summary: Login Reseller
      description: Autenticación para administradores y resellers
      operationId: resellerLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: JavaScript
          label: Fetch
          source: |
            const response = await fetch('https://{{dominio}}/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({
                email: 'admin@qr.buho.la',
                password: 'bh0yJj2C'
              })
            });
            const data = await response.json();
            console.log(data.api_token);
        - lang: JavaScript
          label: Axios
          source: |
            const axios = require('axios');
            
            const { data } = await axios.post('https://{{dominio}}/auth/login', {
              email: 'admin@qr.buho.la',
              password: 'bh0yJj2C'
            }, {
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              }
            });
            console.log(data.api_token);
        - lang: Node.js
          source: |
            const https = require('https');
            
            const postData = JSON.stringify({
              email: 'admin@qr.buho.la',
              password: 'bh0yJj2C'
            });
            
            const options = {
              hostname: '{{dominio}}',
              path: '/auth/login',
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Content-Length': postData.length
              }
            };
            
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', (chunk) => { data += chunk; });
              res.on('end', () => {
                const response = JSON.parse(data);
                console.log(response.api_token);
              });
            });
            
            req.write(postData);
            req.end();
        - lang: PHP
          source: |
            <?php
            $url = 'https://{{dominio}}/auth/login';
            $data = [
                'email' => 'admin@qr.buho.la',
                'password' => 'bh0yJj2C'
            ];
            
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Content-Type: application/json',
                'Accept: application/json'
            ]);
            
            $response = curl_exec($ch);
            curl_close($ch);
            
            $result = json_decode($response, true);
            echo $result['api_token'];
        - lang: Python
          source: |
            import requests
            
            url = 'https://{{dominio}}/auth/login'
            data = {
                'email': 'admin@qr.buho.la',
                'password': 'bh0yJj2C'
            }
            
            response = requests.post(url, json=data, headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            })
            
            result = response.json()
            print(result['api_token'])

  /api/auth/verify_token:
    post:
      tags:
        - Auth - Reseller
      summary: Verificar Token
      description: Verifica la validez de un token JWT
      operationId: verifyResellerToken
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - api_token
              properties:
                api_token:
                  type: string
                  description: El mismo token que se envía en el header Authorization
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    type: object
        '401':
          description: Token inválido o expirado
      x-codeSamples:
        - lang: JavaScript
          label: Fetch
          source: |
            const token = 'eyJ0eXAiOiJKV1QiLCJhbGci...';
            
            const response = await fetch('https://{{dominio}}/api/auth/verify_token', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({ api_token: token })
            });
            const data = await response.json();

  /api/auth/logout:
    get:
      tags:
        - Auth - Reseller
      summary: Logout
      description: Invalida el token actual
      operationId: resellerLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout exitoso
        '401':
          description: No autorizado

  # ==========================================
  # AUTH - TENANT
  # ==========================================
  /api/login:
    post:
      tags:
        - Auth - Tenant
      summary: Login Tenant
      description: Autenticación para usuarios tenant
      operationId: tenantLogin
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: demo.qr.buho.la
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: demo@gmail.com
              password: "123456"
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciales inválidas
      x-codeSamples:
        - lang: JavaScript
          label: Fetch
          source: |
            const response = await fetch('https://{{subdominio}}/api/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({
                email: 'demo@gmail.com',
                password: '123456'
              })
            });
            const data = await response.json();
        - lang: PHP
          source: |
            <?php
            $url = 'https://{{subdominio}}/api/login';
            $data = [
                'email' => 'demo@gmail.com',
                'password' => '123456'
            ];
            
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Content-Type: application/json',
                'Accept: application/json'
            ]);
            
            $response = curl_exec($ch);
            curl_close($ch);
            
            $result = json_decode($response, true);
        - lang: Python
          source: |
            import requests
            
            url = 'https://{{subdominio}}/api/login'
            data = {
                'email': 'demo@gmail.com',
                'password': '123456'
            }
            
            response = requests.post(url, json=data)
            result = response.json()

  # ==========================================
  # PLANS
  # ==========================================
  /api/plan/list:
    get:
      tags:
        - Plans
      summary: Listar Planes
      description: Obtiene la lista de planes disponibles
      operationId: listPlans
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: ID específico del plan
          schema:
            type: integer
        - name: name
          in: query
          description: Filtrar por nombre
          schema:
            type: string
        - name: description
          in: query
          description: Filtrar por descripción
          schema:
            type: string
        - name: paginate
          in: query
          description: Número de resultados por página
          schema:
            type: integer
            default: 15
      responses:
        '200':
          description: Lista de planes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
        '401':
          description: No autorizado

  /api/plan/register:
    post:
      tags:
        - Plans
      summary: Registrar Plan
      description: Crea un nuevo plan de servicio
      operationId: createPlan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanRequest'
      responses:
        '201':
          description: Plan creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Plan'
        '400':
          description: Datos inválidos
        '401':
          description: No autorizado

  # ==========================================
  # TENANTS
  # ==========================================
  /api/tenant/list:
    get:
      tags:
        - Tenants
      summary: Listar Tenants
      description: Obtiene la lista de tenants/clientes
      operationId: listTenants
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: UUID del tenant
          schema:
            type: string
            format: uuid
        - name: domain
          in: query
          description: Filtrar por dominio
          schema:
            type: string
        - name: active
          in: query
          description: Filtrar por estado activo
          schema:
            type: boolean
        - name: paginate
          in: query
          description: Número de resultados por página
          schema:
            type: integer
            default: 15
      responses:
        '200':
          description: Lista de tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tenant'

  /api/tenant/register:
    post:
      tags:
        - Tenants
      summary: Registrar Tenant
      description: Crea un nuevo tenant/cliente
      operationId: createTenant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
      responses:
        '201':
          description: Tenant creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Tenant'
        '400':
          description: Datos inválidos
        '401':
          description: No autorizado

  /api/tenant/delete/{id}:
    delete:
      tags:
        - Tenants
      summary: Eliminar Tenant
      description: Elimina un tenant y todos sus datos asociados
      operationId: deleteTenant
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: UUID del tenant
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tenant eliminado exitosamente
        '404':
          description: Tenant no encontrado
        '401':
          description: No autorizado

  # ==========================================
  # DEVICES
  # ==========================================
  /api/devices/create:
    post:
      tags:
        - Devices
      summary: Crear Dispositivo
      description: Registra un nuevo dispositivo WhatsApp
      operationId: createDevice
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
      responses:
        '201':
          description: Dispositivo creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Device'
                  qr_code:
                    type: string
                    description: Código QR para vincular el dispositivo

  /api/devices/list:
    get:
      tags:
        - Devices
      summary: Listar Dispositivos
      description: Obtiene todos los dispositivos del tenant
      operationId: listDevices
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      responses:
        '200':
          description: Lista de dispositivos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'

  /api/devices/delete/{id}:
    delete:
      tags:
        - Devices
      summary: Eliminar Dispositivo
      description: Elimina un dispositivo
      operationId: deleteDevice
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Dispositivo eliminado

  /api/devices/fetch:
    get:
      tags:
        - Devices
      summary: Obtener Estado de Dispositivos
      description: Obtiene el estado actual de todos los dispositivos
      operationId: fetchDevices
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      responses:
        '200':
          description: Estado de dispositivos

  # ==========================================
  # MESSAGES
  # ==========================================
  /api/message/sendText:
    post:
      tags:
        - Messages
      summary: Enviar Mensaje de Texto
      description: Envía un mensaje de texto a un número
      operationId: sendText
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTextRequest'
      responses:
        '200':
          description: Mensaje enviado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message_id:
                    type: string
      x-codeSamples:
        - lang: JavaScript
          source: |
            const token = 'YOUR_TOKEN';
            
            const response = await fetch('https://{{subdominio}}/api/message/sendText', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                number: '51929088138',
                text: 'Hola desde la API'
              })
            });
        - lang: PHP
          source: |
            <?php
            $token = 'YOUR_TOKEN';
            $url = 'https://{{subdominio}}/api/message/sendText';
            
            $data = [
                'number' => '51929088138',
                'text' => 'Hola desde la API'
            ];
            
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Authorization: Bearer ' . $token,
                'Content-Type: application/json'
            ]);
            
            $response = curl_exec($ch);
            curl_close($ch);
        - lang: Python
          source: |
            import requests
            
            token = 'YOUR_TOKEN'
            url = 'https://{{subdominio}}/api/message/sendText'
            
            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'number': '51929088138',
                'text': 'Hola desde la API'
            }
            
            response = requests.post(url, json=data, headers=headers)

  /api/send/{number}:
    post:
      tags:
        - Messages
      summary: Enviar Mensaje Directo
      description: Envía mensajes usando API Key (sin autenticación JWT)
      operationId: sendMessageDirect
      security:
        - apiKeyAuth: []
      servers:
        - url: https://{subdominio}
      parameters:
        - name: number
          in: path
          required: true
          description: Número de teléfono del dispositivo
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageDirectRequest'
      responses:
        '200':
          description: Mensaje enviado

  # ==========================================
  # CAMPAIGNS
  # ==========================================
  /api/campaigns/manual:
    post:
      tags:
        - Campaigns
      summary: Crear Campaña Manual
      description: Crea una campaña de mensajería masiva
      operationId: createManualCampaign
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateManualCampaignRequest'
      responses:
        '201':
          description: Campaña creada
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Campaign'

  /api/campaigns/list:
    get:
      tags:
        - Campaigns
      summary: Listar Campañas
      description: Obtiene todas las campañas del tenant
      operationId: listCampaigns
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      responses:
        '200':
          description: Lista de campañas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Campaign'

  /api/campaigns/show/{id}:
    get:
      tags:
        - Campaigns
      summary: Detalles de Campaña
      description: Obtiene información detallada de una campaña específica
      operationId: showCampaign
      security:
        - bearerAuth: []
      servers:
        - url: https://{subdominio}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detalles de la campaña
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Campaign'