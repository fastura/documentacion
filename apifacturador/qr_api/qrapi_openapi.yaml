openapi: 3.0.3
info:
  title: QRAPI - Sistema de Mensajería WhatsApp
  description: |
    API completa para gestión de mensajería WhatsApp con soporte multi-tenant.
    
    La API permite gestionar:
    - Autenticación de Resellers y Tenants
    - Planes de suscripción
    - Gestión de Tenants (clientes)
    - Dispositivos WhatsApp
    - Envío de mensajes
    - Campañas de marketing
  version: 1.0.0
  contact:
    name: Soporte QRAPI
    url: https://qr.buho.la

servers:
  - url: http://{dominio}
    description: Servidor Reseller
    variables:
      dominio:
        default: qr.buho.la
        description: Dominio del servidor reseller
  - url: https://{subdominio}
    description: Servidor Tenant
    variables:
      subdominio:
        default: tenant.qr.buho.la
        description: Subdominio del tenant

tags:
  - name: Auth - Reseller
    description: Autenticación para resellers
  - name: Auth - Tenant
    description: Autenticación para tenants
  - name: Plans
    description: Gestión de planes de suscripción
  - name: Tenants
    description: Gestión de tenants (clientes)
  - name: Devices
    description: Gestión de dispositivos WhatsApp
  - name: Messages
    description: Envío de mensajes
  - name: Campaigns
    description: Gestión de campañas de marketing

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Auth - Reseller
      summary: Login de Reseller
      description: Autentica un usuario reseller y retorna un token JWT
      operationId: resellerLogin
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: admin@qr.buho.la
              password: bh0yJj2C
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
      x-codeSamples:
        - lang: javascript
          label: Fetch
          source: |
            const url = 'http://qr.buho.la/auth/login';
            
            const data = {
              email: 'admin@qr.buho.la',
              password: 'bh0yJj2C'
            };
            
            fetch(url, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error('Error:', error));
        
        - lang: python
          label: Requests
          source: |
            import requests
            
            url = "http://qr.buho.la/auth/login"
            
            data = {
                "email": "admin@qr.buho.la",
                "password": "bh0yJj2C"
            }
            
            response = requests.post(url, json=data, headers={'Accept': 'application/json'})
            print(response.json())
        
        - lang: php
          label: cURL
          source: |
            <?php
            $url = 'http://qr.buho.la/auth/login';
            
            $data = [
                'email' => 'admin@qr.buho.la',
                'password' => 'bh0yJj2C'
            ];
            
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Accept: application/json',
                'Content-Type: application/json'
            ]);
            
            $response = curl_exec($ch);
            curl_close($ch);
            echo $response;
            ?>

  /api/auth/verify_token:
    post:
      tags:
        - Auth - Reseller
      summary: Verificar token de Reseller
      description: Verifica la validez de un token JWT
      operationId: resellerVerifyToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - api_token
              properties:
                api_token:
                  type: string
                  description: Token JWT a verificar
            example:
              api_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/register:
    post:
      tags:
        - Auth - Reseller
      summary: Registrar Reseller
      description: Crea una nueva cuenta de reseller
      operationId: resellerRegister
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: demo9@gmail.com
              name: demo9
              password: '12345678'
              password_confirmation: '12345678'
      responses:
        '201':
          description: Registro exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/auth/logout:
    get:
      tags:
        - Auth - Reseller
      summary: Logout de Reseller
      description: Cierra la sesión del reseller
      operationId: resellerLogout
      responses:
        '200':
          description: Logout exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout exitoso

  /api/login:
    post:
      tags:
        - Auth - Tenant
      summary: Login de Tenant
      description: Autentica un usuario tenant y retorna un token JWT
      operationId: tenantLogin
      security: []
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: demo@gmail.com
              password: '123456'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/verify_token:
    post:
      tags:
        - Auth - Tenant
      summary: Verificar token de Tenant
      description: Verifica la validez de un token JWT de tenant
      operationId: tenantVerifyToken
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - api_token
              properties:
                api_token:
                  type: string
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'

  /api/plan/list:
    get:
      tags:
        - Plans
      summary: Listar planes
      description: |
        Obtiene la lista de planes disponibles. 
        Puede filtrarse por ID, nombre, descripción o paginación.
      operationId: listPlans
      parameters:
        - name: id
          in: query
          description: ID del plan
          schema:
            type: integer
        - name: name
          in: query
          description: Nombre del plan
          schema:
            type: string
        - name: description
          in: query
          description: Descripción del plan
          schema:
            type: string
        - name: paginate
          in: query
          description: Número de resultados por página
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de planes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /api/plan/register:
    post:
      tags:
        - Plans
      summary: Registrar plan
      description: Crea un nuevo plan de suscripción
      operationId: registerPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanRequest'
            example:
              name: Plan Premium
              is_free: true
              price: 49.99
              description: Plan con todas las funcionalidades
              limit_devices: 10
              limit_messages: 5000
              limit_contacts: 1000
      responses:
        '201':
          description: Plan creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/tenant/list:
    get:
      tags:
        - Tenants
      summary: Listar tenants
      description: Obtiene la lista de tenants (clientes)
      operationId: listTenants
      parameters:
        - name: id
          in: query
          description: UUID del tenant
          schema:
            type: string
            format: uuid
        - name: domain
          in: query
          description: Dominio del tenant
          schema:
            type: string
        - name: active
          in: query
          description: Estado del tenant
          schema:
            type: boolean
        - name: paginate
          in: query
          description: Número de resultados por página
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tenant'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /api/tenant/register:
    post:
      tags:
        - Tenants
      summary: Registrar tenant
      description: Crea un nuevo tenant (cliente)
      operationId: registerTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantRequest'
            example:
              name: EmpresaDemo
              domain: demooooo
              email: admin@empresa.com
              password: '123456'
              plan_id: 1
      responses:
        '201':
          description: Tenant creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/tenant/delete/{id}:
    delete:
      tags:
        - Tenants
      summary: Eliminar tenant
      description: Elimina un tenant por su UUID
      operationId: deleteTenant
      parameters:
        - name: id
          in: path
          required: true
          description: UUID del tenant
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tenant eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tenant eliminado exitosamente
        '404':
          $ref: '#/components/responses/NotFound'

  /api/devices/create:
    post:
      tags:
        - Devices
      summary: Crear dispositivo
      description: Crea un nuevo dispositivo WhatsApp
      operationId: createDevice
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRequest'
            example:
              name: Mi Dispositivo
              phone: '51987654321'
      responses:
        '201':
          description: Dispositivo creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '422':
          $ref: '#/components/responses/ValidationError'
      x-codeSamples:
        - lang: javascript
          label: Fetch
          source: |
            const url = 'https://tenant.qr.buho.la/api/devices/create';
            const token = 'YOUR_JWT_TOKEN';
            
            const data = {
              name: 'Mi Dispositivo',
              phone: '51987654321'
            };
            
            fetch(url, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => console.log(data));

  /api/devices/list:
    get:
      tags:
        - Devices
      summary: Listar dispositivos
      description: Obtiene la lista de dispositivos del tenant
      operationId: listDevices
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      responses:
        '200':
          description: Lista de dispositivos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'

  /api/devices/delete/{id}:
    delete:
      tags:
        - Devices
      summary: Eliminar dispositivo
      description: Elimina un dispositivo por su ID
      operationId: deleteDevice
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      parameters:
        - name: id
          in: path
          required: true
          description: ID del dispositivo
          schema:
            type: integer
      responses:
        '200':
          description: Dispositivo eliminado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dispositivo eliminado exitosamente
        '404':
          $ref: '#/components/responses/NotFound'

  /api/devices/fetch:
    get:
      tags:
        - Devices
      summary: Obtener dispositivo actual
      description: Obtiene información del dispositivo activo
      operationId: fetchDevice
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      responses:
        '200':
          description: Información del dispositivo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'

  /api/message/sendText:
    post:
      tags:
        - Messages
      summary: Enviar mensaje de texto
      description: Envía un mensaje de texto a un número de WhatsApp
      operationId: sendText
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTextRequest'
            example:
              number: '51929088138'
              text: Hola hola
      responses:
        '200':
          description: Mensaje enviado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '422':
          $ref: '#/components/responses/ValidationError'
      x-codeSamples:
        - lang: javascript
          label: Fetch
          source: |
            const url = 'https://tenant.qr.buho.la/api/message/sendText';
            const token = 'YOUR_JWT_TOKEN';
            
            const data = {
              number: '51929088138',
              text: 'Hola hola'
            };
            
            fetch(url, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => console.log(data));
        
        - lang: nodejs
          label: Axios
          source: |
            const axios = require('axios');
            
            const url = 'https://tenant.qr.buho.la/api/message/sendText';
            const token = 'YOUR_JWT_TOKEN';
            
            const data = {
              number: '51929088138',
              text: 'Hola hola'
            };
            
            axios.post(url, data, {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
              }
            })
            .then(response => console.log(response.data))
            .catch(error => console.error(error));
        
        - lang: python
          label: Requests
          source: |
            import requests
            
            url = "https://tenant.qr.buho.la/api/message/sendText"
            token = "YOUR_JWT_TOKEN"
            
            headers = {
                "Authorization": f"Bearer {token}",
                "Accept": "application/json"
            }
            
            data = {
                "number": "51929088138",
                "text": "Hola hola"
            }
            
            response = requests.post(url, json=data, headers=headers)
            print(response.json())
        
        - lang: php
          label: cURL
          source: |
            <?php
            $url = 'https://tenant.qr.buho.la/api/message/sendText';
            $token = 'YOUR_JWT_TOKEN';
            
            $data = [
                'number' => '51929088138',
                'text' => 'Hola hola'
            ];
            
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Authorization: Bearer ' . $token,
                'Accept: application/json',
                'Content-Type: application/json'
            ]);
            
            $response = curl_exec($ch);
            curl_close($ch);
            echo $response;
            ?>

  /api/send/{number}:
    post:
      tags:
        - Messages
      summary: Enviar mensaje directo (API Key)
      description: |
        Envía un mensaje directamente usando API Key en lugar de Bearer token.
        Soporta diferentes tipos de mensajes según el campo `type`.
      operationId: sendMessageDirect
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      security:
        - apiKeyAuth: []
      parameters:
        - name: number
          in: path
          required: true
          description: Número de teléfono del dispositivo
          schema:
            type: string
            example: '51987654321'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendDirectRequest'
            example:
              type: sendText
              payload:
                number: '51929088138'
                text: Hola desde el gateway 👋
      responses:
        '200':
          description: Mensaje enviado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/campaigns/manual:
    post:
      tags:
        - Campaigns
      summary: Crear campaña manual
      description: Crea una campaña de mensajes para grupos específicos
      operationId: createManualCampaign
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualCampaignRequest'
            example:
              title: Campaña de prueba
              groups: [1, 2]
              message: Hola, este es un mensaje de prueba.
              schedule_at: '2025-10-01 10:00:00'
              attach_pdf: null
      responses:
        '201':
          description: Campaña creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '422':
          $ref: '#/components/responses/ValidationError'
      x-codeSamples:
        - lang: javascript
          label: Fetch
          source: |
            const url = 'https://tenant.qr.buho.la/api/campaigns/manual';
            const token = 'YOUR_JWT_TOKEN';
            
            const data = {
              title: 'Campaña de prueba',
              groups: [1, 2],
              message: 'Hola, este es un mensaje de prueba.',
              schedule_at: '2025-10-01 10:00:00',
              attach_pdf: null
            };
            
            fetch(url, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => console.log(data));

  /api/campaigns/list:
    get:
      tags:
        - Campaigns
      summary: Listar campañas
      description: Obtiene la lista de campañas creadas
      operationId: listCampaigns
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      responses:
        '200':
          description: Lista de campañas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campaign'

  /api/campaigns/show/{id}:
    get:
      tags:
        - Campaigns
      summary: Detalles de campaña
      description: Obtiene los detalles de una campaña específica
      operationId: showCampaign
      servers:
        - url: https://{subdominio}
          variables:
            subdominio:
              default: tenant.qr.buho.la
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la campaña
          schema:
            type: integer
      responses:
        '200':
          description: Detalles de la campaña
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDetail'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT obtenido del login
    
    apiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: API Key para autenticación directa

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: admin@qr.buho.la
        password:
          type: string
          format: password
          example: password123

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token JWT
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: Tiempo de expiración en segundos
        user:
          $ref: '#/components/schemas/User'

    RegisterRequest:
      type: object
      required:
        - email
        - name
        - password
        - password_confirmation
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
          format: password
          minLength: 8
        password_confirmation:
          type: string
          format: password

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Plan:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        is_free:
          type: boolean
        price:
          type: number
          format: float
        limit_devices:
          type: integer
        limit_messages:
          type: integer
        limit_contacts:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PlanRequest:
      type: object
      required:
        - name
        - is_free
      properties:
        name:
          type: string
          example: Plan Premium
        is_free:
          type: boolean
          example: false
        price:
          type: number
          format: float
          example: 49.99
        description:
          type: string
          example: Plan con todas las funcionalidades
        limit_devices:
          type: integer
          example: 10
        limit_messages:
          type: integer
          example: 5000
        limit_contacts:
          type: integer
          example: 1000

    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        domain:
          type: string
        email:
          type: string
          format: email
        plan_id:
          type: integer
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        plan:
          $ref: '#/components/schemas/Plan'

    TenantRequest:
      type: object
      required:
        - name
        - domain
        - email
        - password
        - plan_id
      properties:
        name:
          type: string
          example: EmpresaDemo
        domain:
          type: string
          example: demooooo
          description: Subdominio único del tenant
        email:
          type: string
          format: email
          example: admin@empresa.com
        password:
          type: string
          format: password
          minLength: 6
        plan_id:
          type: integer
          example: 1

    Device:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [connected, disconnected, pending]
        qr_code:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    DeviceRequest:
      type: object
      required:
        - name
        - phone
      properties:
        name:
          type: string
          example: Mi Dispositivo
        phone:
          type: string
          example: '51987654321'
          pattern: '^\d{11,15}$'

    SendTextRequest:
      type: object
      required:
        - number
        - text
      properties:
        number:
          type: string
          example: '51929088138'
          description: Número de WhatsApp destino
        text:
          type: string
          example: Hola hola
          description: Mensaje de texto a enviar

    SendDirectRequest:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum: [sendText, sendImage, sendDocument, sendAudio, sendVideo]
          example: sendText
          description: Tipo de mensaje a enviar
        payload:
          type: object
          description: Datos específicos según el tipo de mensaje

    MessageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message_id:
          type: string
        status:
          type: string
          enum: [sent, pending, failed]
        timestamp:
          type: string
          format: date-time

    ManualCampaignRequest:
      type: object
      required:
        - title
        - groups
        - message
      properties:
        title:
          type: string
          example: Campaña de prueba
        groups:
          type: array
          items:
            type: integer
          example: [1, 2]
          description: IDs de los grupos destinatarios
        message:
          type: string
          example: Hola, este es un mensaje de prueba.
        schedule_at:
          type: string
          format: date-time
          example: '2025-10-01 10:00:00'
          nullable: true
          description: Fecha y hora de programación (null para envío inmediato)
        attach_pdf:
          type: string
          nullable: true
          description: URL o path del PDF adjunto

    Campaign:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        message:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        schedule_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CampaignDetail:
      allOf:
        - $ref: '#/components/schemas/Campaign'
        - type: object
          properties:
            groups:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  contacts_count:
                    type: integer
            statistics:
              type: object
              properties:
                total_messages:
                  type: integer
                sent:
                  type: integer
                failed:
                  type: integer
                pending:
                  type: integer

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
        from:
          type: integer
        last_page:
          type: integer
        per_page:
          type: integer
        to:
          type: integer
        total:
          type: integer

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    Unauthorized:
      description: No autorizado - Token inválido o ausente
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: No autorizado

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: Recurso no encontrado

    ValidationError:
      description: Error de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: Los datos proporcionados son inválidos
            errors:
              email:
                - El campo email es obligatorio
              password:
                - El campo password debe tener al menos 8 caracteres