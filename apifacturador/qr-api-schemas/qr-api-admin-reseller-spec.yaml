openapi: 3.0.3
info:
  title: QRAPI - Admin/Reseller API
  description: |
    API de administración para revendedores de QRAPI. 
    Permite gestionar planes, tenants y operaciones administrativas.
  version: 1.0.0
  contact:
    name: Soporte QRAPI
    email: admin@qr.buho.la

servers:
  - url: http://{dominio}
    description: Servidor principal
    variables:
      dominio:
        default: qr.buho.la
        description: Dominio del servidor

tags:
  - name: Auth
    description: Autenticación de revendedores
  - name: Plans
    description: Gestión de planes de servicio
  - name: Tenants
    description: Gestión de empresas/clientes (tenants)

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login de revendedor
      description: Autentica un usuario revendedor y devuelve un token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@qr.buho.la
                password:
                  type: string
                  format: password
                  example: bh0yJj2C
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_token:
                    type: string
                    description: Token JWT para autenticación
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      name:
                        type: string
        '401':
          description: Credenciales inválidas

  /api/auth/verify_token:
    post:
      tags:
        - Auth
      summary: Verificar token JWT
      description: Valida si un token JWT es válido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - api_token
              properties:
                api_token:
                  type: string
                  description: Token JWT a verificar
      responses:
        '200':
          description: Token válido
        '401':
          description: Token inválido o expirado

  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Registrar nuevo revendedor
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - password
                - password_confirmation
              properties:
                email:
                  type: string
                  format: email
                  example: demo9@gmail.com
                name:
                  type: string
                  example: demo9
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "12345678"
                password_confirmation:
                  type: string
                  format: password
                  example: "12345678"
      responses:
        '201':
          description: Revendedor registrado exitosamente
        '422':
          description: Error de validación

  /api/auth/logout:
    get:
      tags:
        - Auth
      summary: Cerrar sesión
      description: Invalida el token JWT actual
      responses:
        '200':
          description: Sesión cerrada exitosamente

  /api/plan/list:
    get:
      tags:
        - Plans
      summary: Listar planes
      description: Obtiene lista de planes disponibles
      parameters:
        - name: id
          in: query
          description: ID específico de plan
          schema:
            type: integer
        - name: name
          in: query
          description: Filtrar por nombre de plan
          schema:
            type: string
        - name: description
          in: query
          description: Filtrar por descripción
          schema:
            type: string
        - name: paginate
          in: query
          description: Número de resultados por página
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de planes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'

  /api/plan/register:
    post:
      tags:
        - Plans
      summary: Registrar nuevo plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
      responses:
        '201':
          description: Plan creado exitosamente
        '422':
          description: Error de validación

  /api/tenant/list:
    get:
      tags:
        - Tenants
      summary: Listar tenants
      parameters:
        - name: id
          in: query
          description: ID específico de tenant (UUID)
          schema:
            type: string
            format: uuid
        - name: domain
          in: query
          description: Filtrar por dominio
          schema:
            type: string
        - name: active
          in: query
          description: Filtrar por estado activo
          schema:
            type: boolean
        - name: paginate
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tenant'

  /api/tenant/register:
    post:
      tags:
        - Tenants
      summary: Registrar nuevo tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInput'
      responses:
        '201':
          description: Tenant creado exitosamente
        '422':
          description: Error de validación

  /api/tenant/delete/{id}:
    delete:
      tags:
        - Tenants
      summary: Eliminar tenant
      parameters:
        - name: id
          in: path
          required: true
          description: ID del tenant (UUID)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tenant eliminado exitosamente
        '404':
          description: Tenant no encontrado

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Plan:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        is_free:
          type: boolean
        price:
          type: number
          format: float
        description:
          type: string
        limit_devices:
          type: integer
        limit_messages:
          type: integer
        limit_contacts:
          type: integer

    PlanInput:
      type: object
      required:
        - name
        - is_free
        - price
      properties:
        name:
          type: string
          example: Plan Premium
        is_free:
          type: boolean
          example: true
        price:
          type: number
          format: float
          example: 49.99
        description:
          type: string
          example: Plan con todas las funcionalidades
        limit_devices:
          type: integer
          example: 10
        limit_messages:
          type: integer
          example: 5000
        limit_contacts:
          type: integer
          example: 1000

    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        domain:
          type: string
        email:
          type: string
          format: email
        plan_id:
          type: integer
        active:
          type: boolean

    TenantInput:
      type: object
      required:
        - name
        - domain
        - email
        - password
        - plan_id
      properties:
        name:
          type: string
          example: EmpresaDemo
        domain:
          type: string
          example: demooooo
          description: Subdominio para el tenant
        email:
          type: string
          format: email
          example: admin@empresa.com
        password:
          type: string
          format: password
          example: "123456"
        plan_id:
          type: integer
          example: 1